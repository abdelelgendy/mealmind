import { useEffect, useState } from "react";
import { loadPrefs, savePrefs } from "../utils/storage";
import { useAuth } from "../contexts/AuthContext";
import { updateProfile } from "../lib/supabase";

export default function Preferences() {
  const { user, profile, setProfile } = useAuth();
  const [prefs, setPrefs] = useState(() => {
    // If we have a user profile with preferences, use that
    if (profile && profile.preferences) {
      return profile.preferences;
    }
    // Otherwise use local storage
    return loadPrefs();
  });
  const [saved, setSaved] = useState(false);
  const [saving, setSaving] = useState(false);

  // Update prefs when profile changes
  useEffect(() => {
    if (profile && profile.preferences) {
      setPrefs(profile.preferences);
    }
  }, [profile]);

  useEffect(() => {
    // optional: show a tiny "saved" flash after save
    if (saved) {
      const t = setTimeout(() => setSaved(false), 1200);
      return () => clearTimeout(t);
    }
  }, [saved]);

  async function onSubmit(e) {
    e.preventDefault();
    const caloriesNum = Number(prefs.calories) || 0;
    const next = {
      calories: caloriesNum,
      diet: prefs.diet.trim(),
      allergies: prefs.allergies.trim(), // comma-separated string for now
    };
    
    // Save locally
    savePrefs(next);
    setPrefs(next);
    
    // If user is logged in, save to Supabase
    if (user) {
      setSaving(true);
      try {
        // Update the user's profile with new preferences
        const updatedProfile = await updateProfile(user.id, {
          ...profile,
          preferences: next
        });
        
        if (updatedProfile) {
          // Update the profile in auth context
          setProfile(updatedProfile[0]);
        }
      } catch (error) {
        console.error("Error saving preferences to Supabase:", error);
      } finally {
        setSaving(false);
        setSaved(true);
      }
    } else {
      setSaved(true);
    }
  }

  return (
    <section className="container">
      <h1>Preferences</h1>
      <p className="muted">These guide search and meal planning. You can change them anytime.</p>

      <form className="prefs-form" onSubmit={onSubmit}>
        <label className="field">
          <span>Daily calories</span>
          <input
            type="number"
            min="800"
            max="6000"
            placeholder="e.g., 2200"
            value={prefs.calories}
            onChange={(e) => setPrefs({ ...prefs, calories: e.target.value })}
          />
        </label>

        <label className="field">
          <span>Diet</span>
          <select
            value={prefs.diet}
            onChange={(e) => setPrefs({ ...prefs, diet: e.target.value })}
          >
            <option value="">Any</option>
            <option value="balanced">Balanced</option>
            <option value="high-protein">High protein</option>
            <option value="keto">Keto</option>
            <option value="vegetarian">Vegetarian</option>
            <option value="vegan">Vegan</option>
          </select>
        </label>

        <label className="field field-wide">
          <span>Allergies (comma-separated)</span>
          <input
            type="text"
            placeholder="peanut, gluten, shellfish"
            value={prefs.allergies}
            onChange={(e) => setPrefs({ ...prefs, allergies: e.target.value })}
          />
          <span className="help">
            These will be excluded from recipes when possible.
          </span>
        </label>

        <div className="form-actions">
          <button 
            type="submit" 
            className="btn" 
            disabled={saving}
          >
            {saving ? "Saving..." : "Save preferences"}
          </button>
          {saved && <span className="saved">Saved!</span>}
        </div>
      </form>
    </section>
  );
}
